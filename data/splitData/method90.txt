/*** Remove the current element from this sequence.
* @param - none
* @precondition
*   isCurrent() returns true.
* @postcondition
*   The current element has been removed from this sequence, and the
*   following element (if there is one) is now the new current element.
*   If there was no following element, then there is now no current
*   element.
* @exception IllegalStateException
*   Indicates that there is no current element, so
*   removeCurrent may not be called.
**/
public void removeCurrent( )
{
assert wellFormed() : "invariant wrong at start of removeCurrent()";
if(!isCurrent()) throw new IllegalStateException("no element to remove");

if(size == 1) {
tail = tail.next;
tail.next = tail;
precursor = tail;
}else if(precursor.next == tail){
precursor.next = precursor.next.next;
tail = precursor;
}else {
precursor.next = precursor.next.next;
}

size--;
// TODO: Implemented by student.
// See textbook pp.176-78, 181-184
assert wellFormed() : "invariant wrong at end of removeCurrent()";
}