{
  "javadoc": "/*** Return the shortest path between two vertices in the graph\n* @param v1 starting vertex\n* @param v2 ending vertex\n* @return path from the first to the second as a list of vertices, or null\n* is no path exists.\n* @throws IllegalArgumentException if v1 or v2 is not in the graph\n*/",
  "code": "@SuppressWarnings(\"unchecked\")\npublic List<T> shortestPath(T v1, T v2) {\n\nif(!(graph.containsVertex(v1) && graph.containsVertex(v2))) throw new IllegalArgumentException(\"Must be in graph\");\n\nArrayDeque<ArrayList<T>> queue = new ArrayDeque<>();\nHashSet<T> visited = new HashSet<>();\nArrayList<T> list = new ArrayList<>();\n\nlist.add(v1);\nqueue.push(list);\nwhile(!queue.isEmpty()) {\nlist = queue.poll();\nT current = list.get(list.size() - 1);\nif(!visited.contains(current)) {\nvisited.add(current);\nif(current.equals(v2)) {\nreturn list;\n}else {\nSet<T> connected = graph.getConnected(current);\nfor(T vert : connected) {\n    list.add(vert);\n    queue.addLast((ArrayList<T>) list.clone());\n    list.remove(list.size() - 1);\n}\n}\n}\n}\n\nreturn null; // no path found\n}",
  "accessModifier": "unknown",
  "returnType": "unknown",
  "methodName": "unknown"
}