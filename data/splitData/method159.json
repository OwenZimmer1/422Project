{
  "javadoc": "/*** Destructively sort a CLL using quicksort, and return it.\n* The pivot chose should always be the first element.\n* @param l CLL identified by its tail\n*/",
  "code": "private Node<E> quicksort(Node<E> tail) {\nif(tail.next.next == tail) return tail;\n\nNode<E> pivot = tail.next.next;\nNode<E> dum = tail.next;\ntail = partition(tail);\n\nNode<E> tail2 = tail.next;\nwhile(tail2.next != pivot) tail2 = tail2.next;\ntail2.next = dum;\ntail2 = quicksort(tail2);\nNode<E> beforeHead = tail2.next.next;\ntail2.next = beforeHead;\n\nif(tail == pivot) tail = dum;\ntail.next = dum;\ndum.next = pivot.next;\ntail = quicksort(tail);\nNode<E> afterHead = tail.next.next;\n\ntail2.next = pivot;\npivot.next = afterHead;\nif(tail.data == null) tail = pivot;\ntail.next = dum;\nif(beforeHead.data != null) dum.next = beforeHead;\n\nreturn tail;\n}",
  "method_name": "quicksort",
  "parameters": "Node<E> tail",
  "return_type": "Node<E>",
  "return_variable": "tail",
  "called_methods": [
    "partition"
  ],
  "local_variables": [
    "tail",
    "pivot",
    "dum",
    "tail2",
    "beforeHead",
    "afterHead",
    "tail"
  ],
  "thrown_exceptions": [],
  "class_name": "SortedCollection"
}