{
  "method": "/*** Remove the current element from this sequence.\n* @param - none\n* @precondition\n*   isCurrent() returns true.\n* @postcondition\n*   The current element has been removed from this sequence, and the\n*   following element (if there is one) is now the new current element.\n*   If there was no following element, then there is now no current\n*   element.\n* @exception IllegalStateException\n*   Indicates that there is no current element, so\n*   removeCurrent may not be called.\n**/\npublic void removeCurrent( )\n{\nassert wellFormed() : \"invariant wrong at start of removeCurrent()\";\nif(!isCurrent()) throw new IllegalStateException(\"no element to remove\");\n\nif(size == 1) {\ntail = tail.next;\ntail.next = tail;\nprecursor = tail;\n}else if(precursor.next == tail){\nprecursor.next = precursor.next.next;\ntail = precursor;\n}else {\nprecursor.next = precursor.next.next;\n}\n\nsize--;\n// TODO: Implemented by student.\n// See textbook pp.176-78, 181-184\nassert wellFormed() : \"invariant wrong at end of removeCurrent()\";\n}"
}