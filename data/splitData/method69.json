{
  "javadoc": "/*** Add another player into this player's team by priority order.\n* <ul>\n* <li> If the other player has higher priority, place it somewhere before this player.\n* <li> If the other player has equal priority, it should be placed immediately after this player.\n* <li> If the other player has lower priority, place it somewhere after this player.\n* </ul>\n* It may be necessary to move multiple times forward or multiple times backward (but not both!)\n* <p>\n* Also, the code must use recursion to traverse the list - no loops are allowed!\n* @param p the player to add to our list, must not be null\n* @param priority comparator of players in the list, must not be null\n*/",
  "code": "public void addInPriority(Player p, Comparator<Player> priority) {\n// TODO: Implement this method.  No loops, only recursion\n//\n// NB: While Team happens to call this method only on the head of the list,\n//\t   we can't assume all classes that utilize Player will do so. That is why\n//\t   we must consider all scenarios, including those where this method is\n//\t   called on a player in the middle or end of the list.\n\nif(priority.compare(p, this) < 0) {\nif(next == null) {\np.prev = this;\nnext = p;\n}else if(priority.compare(p, next) > 0) {\np.prev = this;\np.next = next;\nnext.prev = p;\nnext = p;\n}else {\nnext.addInPriority(p, priority);\n}\n}else if(priority.compare(p, this) > 0) {\nif(prev == null) {\np.next = this;\nprev = p;\n}else if(priority.compare(p, prev) < 0) {\np.next = this;\np.prev = prev;\nprev.next = p;\nprev = p;\n}else {\nprev.addInPriority(p, priority);\n}\n}else {//(priority.compare(p, this) == 0)\nif(next == null) {\np.prev = this;\nnext = p;\n}else {\np.prev = this;\np.next = next;\nnext.prev = p;\nnext = p;\n}\n}\n}"
}