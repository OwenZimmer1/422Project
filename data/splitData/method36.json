{
  "javadoc": "/*** Move forward, so that the next element is now the current element in\n* this sequence.\n* @param - none\n* @precondition\n*   isCurrent() returns true.\n* @postcondition\n*   If the current element was already the end element of this sequence\n*   (with nothing after it), then there is no longer any current element.\n*   Otherwise, the new current element is the element immediately after the\n*   original current element.\n* @exception IllegalStateException\n*   If there was no current element, so\n*   advance may not be called (the precondition was false).\n**/",
  "code": "public void advance( )\n{\nassert wellFormed() : \"invariant failed at start of advance\";\n\nif(!isCurrent()) throw new IllegalStateException(\"Can not advance\");\nif(data.length > currentIndex)\ncurrentIndex++;\n\nassert wellFormed() : \"invariant failed at end of advance\";\n}",
  "method_name": "advance",
  "parameters": "",
  "return_type": "void",
  "return_variable": "",
  "called_methods": [
    "wellFormed",
    "isCurrent",
    "IllegalStateException"
  ],
  "local_variables": [],
  "thrown_exceptions": [
    "IllegalStateException"
  ]
}