{
  "method": "/*** Generate a copy of this sequence.\n* @param - none\n* @return\n*   The return value is a copy of this sequence. Subsequent changes to the\n*   copy will not affect the original, nor vice versa.\n*   Whatever was current in the original object is now current in the clone.\n* @exception OutOfMemoryError\n*   Indicates insufficient memory for creating the clone.\n**/\n@SuppressWarnings(\"unchecked\")\npublic LinkedSequence<E> clone( )\n{\nassert wellFormed() : \"invariant wrong at start of clone()\";\n\nLinkedSequence<E> result;\n\ntry\n{\nresult = (LinkedSequence<E>) super.clone( );\n}\ncatch (CloneNotSupportedException e)\n{\n// This exception should not occur. But if it does, it would probably\n// indicate a programming error that made super.clone unavailable.\n// The most common error would be forgetting the \"Implements Cloneable\"\n// clause at the start of this class.\nthrow new RuntimeException\n(\"This class does not implement Cloneable\");\n}\n\nNode<E> cursor = new Node<>(tail.data, tail.next);\nresult.tail = cursor;\nNode<E> source = tail.next;\nwhile(source != tail) {\ncursor.next = new Node<E>(source.data, source.next);\nif(source == precursor) result.precursor = cursor.next;\ncursor = cursor.next;\nsource = source.next;\n}\ncursor.next = result.tail;\nresult.tail.next.data = (E)result.tail.next;\nif(source == precursor) result.precursor = cursor.next;\n\n\n// TODO: Implemented by student.\n// Now do the hard work of cloning the list.\n// Similar to Homework #4, setting result.precursor requires an \"if\"\n// It's possible to handle the dummy without a second if or an unsafe cast.\n// but it's OK to have a second if and/or a cast to handle this.\nassert wellFormed() : \"invariant wrong at end of clone()\";\nassert result.wellFormed() : \"invariant wrong for result of clone()\";\nreturn result;\n}"
}