{
  "method": "/*** Count all the nodes in this subtree,\n* while checking that all the keys are all in the range (lo,hi),\n* and that the keys are arranged in BST form,\n* and that the node are linked in-order.\n* If a problem is found, -1 is returned and exactly one problem is reported.\n* <p>\n* @param n the root of the subtree to check\n* @param lo if non-null then all strings in the subtree rooted\n* \t\t\t\tat n must be [lexicographically] greater than this parameter\n* @param hi if non-null then all strings in the subtree rooted\n* \t\t\t\tat n must be [lexicographically] less than this parameter\n* @param first the node that should be first in this tree, or if the tree\n*        is empty, then this should be the next node\n* @param next the node that should be linked next after this subtree.\n* @return number of nodes in the subtree, or -1 is there is a problem.\n*/\nprivate int checkInRange(Node n, String lo, String hi, Node first, Node next)\n{\nif(n == null) {\nif(first != next) return reportNeg(\"tree out of order\");\nreturn 0;\n}\nif (n.string == null) return reportNeg(\"null word found\");\nif (n.count <= 0) return reportNeg(\"Count is 0\");\n//first check node r\nif (lo != null && (n.string.equals(lo) || n.string.compareTo(lo) < 0))\nreturn reportNeg(\"Detected node outside of low bound: \"+n.string);\nif (hi != null && (n.string.equals(hi) || n.string.compareTo(hi) > 0))\nreturn reportNeg(\"Detected node outside of high bound: \"+n.string);\n\n//if(first != null && first.string != null && lo != null && first.string.compareTo(lo) < 0) return reportNeg(\"lo and first are wrong\");\n\n//check subtrees\nint leftSubtree = checkInRange(n.left, lo, n.string, first, n);\nif (leftSubtree < 0) return -1;\n\nint rightSubtree = checkInRange(n.right, n.string, hi, n.next, next);\nif (rightSubtree < 0) return -1;\n\n//otherwise return 1 + nodes in subtrees\nreturn 1 + leftSubtree + rightSubtree;\n}"
}