/** Returns the next process to be polled from this queue.
*
* @return the next process to be polled by this queue, or null if empty
* @see java.util.Queue#peek()
*/
@Override
public Process peek(){
assert wellFormed() : "invariant failed at start of peek";
if(manyItems == 0) return null;
return dummy.next;
}

/** Removes and returns the process at the start of this queue, null if empty.
*  This method should never return the dummy process!
*
* @returns the process at the start of this queue, or null if empty
* @see java.util.Queue#poll()
*/
@Override
public Process poll() {
assert wellFormed() : "invariant failed at start of poll";
if(manyItems == 0) return null;
Process result = dummy.next;
dummy.next = result.next;
result.next.prev = dummy;
result.next = null;
result.prev = null;
version++;
manyItems--;
assert wellFormed() : "invariant failed at end of poll";
return result;
}

/** Returns the number of non-dummy processes in this queue.
*
* @return the number of non-dummy processes
* @see java.util.AbstractCollection#size()
*/
@Override
public int size() {
assert wellFormed() : "invariant of result failed at start of size()";
return manyItems;
}

/** Returns a new copy of this queue. The copy should be unaffected
*  by subsequent changes made to this queue, and vice versa. The
*  processes added to the copy should be clones.
*
* @return a clone of this queue
* @see java.lang.Object#clone()
*/
@Override
public Queue clone(){
assert wellFormed() : "invariant failed at start of clone()";

Queue copy = new Queue();

try{ copy = (Queue) super.clone();}
catch(CloneNotSupportedException e){
// should not happen
}

Process source = dummy;
Process copier = source.clone();
copy.dummy = copier;
source = source.next;
while(source != dummy) {
copier.next = source.clone();
copier.next.prev = copier;
copier = copier.next;
source = source.next;
}
copier.next = copy.dummy;
copier.next.prev = copier;

assert wellFormed() : "invariant failed at end of clone()";
assert copy.wellFormed() : "invariant of result failed at end of clone()";
return copy;
}

public boolean hasNext() {
assert wellFormed() : "invariant failed at start of hasNext()";
if(version != myVersion) throw new ConcurrentModificationException("versions don't match");
return cursor.next != dummy;
}

/** Returns the next process in this queue. This method should
*  *not* call poll, or change the state of the queue in any way.
*
*  @throws ConcurrentModificationException if versions don't match
*  @throws NoSuchElementException if no element is next
*  @return the next process in the queue
*/
public Process next() {
assert wellFormed() : "invariant failed at start of next()";
if(version != myVersion) throw new ConcurrentModificationException("versions don't match");
if(!hasNext()) throw new NoSuchElementException("no element found");
cursor = cursor.next;
assert wellFormed() : "invariant failed at end of next()";
return cursor;
}