{
  "javadoc": "/*** Read in a graph from the given reader.\n* Each line (once trimmed of whitespace) names a vertex (a string),\n* but before we trim, we check to see if the line begins with whitespace,\n* in which case this vertex is the second vertex of an edge that\n* begins with the last vertex that was on a line not starting with whitespace.\n* <p> For example, the following text:\n* <pre>\n* A\n* B\n*   A\n*   C\n* </pre>\n* is a graph with three vertices (A, B and C) and two\n* edges, A-B and B-C.\n* @param r\n* @return graph represented by text of reader.\n* @throws IOException if error reading or if the first line is indented.\n*/",
  "code": "public static Graph<String> read(Reader r) throws IOException {\nGraph<String> result = new HashGraph<>();\n// TODO: Read in the graph from the reader.\n// Our solution is 15 lines long, and it uses the following library classes:\n// * BufferedReader\n\nBufferedReader reader = new BufferedReader(r);\nString before = null;\nfor(String s = reader.readLine(); s != null; s = reader.readLine()) {\nif(s.startsWith(\" \") || s.startsWith(\"\\t\")) {\nif(before == null) throw new IOException(\"can't lead with white space\");\ns = s.strip();\nif(!result.containsVertex(s)) result.addVertex(s);\nif(!result.containsEdge(s, before)) result.addEdge(s, before);\n}else {\ns = s.strip();\nif(!result.containsVertex(s)) result.addVertex(s);\nbefore = s;\n}\n}\n\nreturn result;\n}"
}