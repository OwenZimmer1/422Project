{
  "javadoc": "/*** Count all the nodes in this subtree,\n* while checking that all the keys are all in the range (lo,hi),\n* and that the keys are arranged in BST form.\n* If a problem is found, -1 is returned and exactly one problem is reported.\n* <p>\n* @param n the root of the subtree to check\n* @param lo if non-null then all strings in the subtree rooted\n* \t\t\t\tat n must be [lexicographically] greater than this parameter\n* @param hi if non-null then all strings in the subtree rooted\n* \t\t\t\tat n must be [lexicographically] less than this parameter\n* @return number of nodes in the subtree, or -1 is there is a problem.\n*/",
  "code": "private int checkInRange(Node n, String lo, String hi)\n{\n//must account for checking an empty list or leaf's links\nif (n == null) return 0;\nif (n.string == null) return reportNeg(\"null word found\");\n\n//first check node r\nif (lo != null && (n.string.equals(lo) || n.string.compareTo(lo) < 0))\nreturn reportNeg(\"Detected node outside of low bound: \"+n.string);\nif (hi != null && (n.string.equals(hi) || n.string.compareTo(hi) > 0))\nreturn reportNeg(\"Detected node outside of high bound: \"+n.string);\n\n//check subtrees\nint leftSubtree =  checkInRange(n.left, lo, n.string);\nif (leftSubtree < 0) return -1;\n\nint rightSubtree = checkInRange(n.right, n.string, hi);\nif (rightSubtree < 0) return -1;\n\n//otherwise return 1 + nodes in subtrees\nreturn 1 + leftSubtree + rightSubtree;\n}",
  "accessModifier": "private",
  "returnType": "int",
  "methodName": "checkInRange"
}